# .github/workflows/terraform-cicd.yml

name: Terraform CI/CD

on:
  push:
    branches:
      - main  # Or your desired deployment branch
    paths:
      - 'Terraform/**'  # Trigger only on changes to the Terraform folder

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: production  # Or the environment you want to deploy to (e.g., staging)

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.1  # Specify the Terraform version (e.g., 1.3.0)

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

   #   - name: Install AWS CLI
     #   run: |
      #    sudo apt-get update
       #   sudo apt-get install -y awscli

     # - name: Delete Existing IAM Instance Profile
      #  run: |
       #   PROFILE_NAME="EC2_lambda_instance_profile"
        #  PROFILE_ARN=$(aws iam get-instance-profile --instance-profile-name $PROFILE_NAME --query 'InstanceProfile.Arn' --output text)
         # if [ -n "$PROFILE_ARN" ]; then
          #  aws iam delete-instance-profile --instance-profile-name $PROFILE_NAME
          #else
           # echo "Instance Profile $PROFILE_NAME does not exist."
          #fi

     # - name: Delete Existing ALB Target Group
      #  run: |
       #   TG_NAME="webapp-tg"
        #  TG_ARN=$(aws elbv2 describe-target-groups --names $TG_NAME --query 'TargetGroups[0].TargetGroupArn' --output text)
         # if [ -n "$TG_ARN" ]; then
          #  aws elbv2 delete-target-group --target-group-arn $TG_ARN
#          else
 #           echo "Target Group $TG_NAME does not exist."
  #        fi

   #   - name: Delete Existing CodeDeploy Application
    #    run: |
     #     APP_NAME="webapp"
      #    APP_ARN=$(aws deploy get-application --application-name $APP_NAME --query 'application.applicationId' --output text)
       #   if [ -n "$APP_ARN" ]; then
        #    aws deploy delete-application --application-name $APP_NAME
         # else
          #  echo "CodeDeploy Application $APP_NAME does not exist."
          #fi

      #- name: Delete Existing EC2 Key Pair
       # run: |
        #  KEY_NAME="webapp_keypair"
         # KEY_PAIR=$(aws ec2 describe-key-pairs --key-names $KEY_NAME --query 'KeyPairs[0].KeyName' --output text)
          #if [ -n "$KEY_PAIR" ]; then
           # aws ec2 delete-key-pair --key-name $KEY_NAME
         # else
          #  echo "Key Pair $KEY_NAME does not exist."
         # fi
         
      - name: Terraform Init
        working-directory: Terraform  # Navigate to the Terraform folder
        run: terraform init

      - name: Terraform Plan
        working-directory: Terraform
        run: terraform plan
        continue-on-error: true # If you want to continue even if the plan fails (for logging purposes)

      - name: Terraform Apply
        working-directory: Terraform
        run: terraform apply -auto-approve
        #run
